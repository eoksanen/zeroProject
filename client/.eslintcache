[{"E:\\zeroProject\\client\\src\\index.js":"1","E:\\zeroProject\\client\\src\\App.js":"2","E:\\zeroProject\\client\\src\\components\\LoginForm.js":"3","E:\\zeroProject\\client\\src\\queries\\query.js":"4","E:\\zeroProject\\client\\src\\queries\\mutation.js":"5","E:\\zeroProject\\client\\src\\components\\Notify.js":"6","E:\\zeroProject\\client\\src\\components\\Users.js":"7","E:\\zeroProject\\client\\src\\components\\UserForm.js":"8"},{"size":1198,"mtime":1608131537523,"results":"9","hashOfConfig":"10"},{"size":2125,"mtime":1608131806459,"results":"11","hashOfConfig":"10"},{"size":1848,"mtime":1608131246706,"results":"12","hashOfConfig":"10"},{"size":912,"mtime":1608129044540,"results":"13","hashOfConfig":"10"},{"size":739,"mtime":1608130429339,"results":"14","hashOfConfig":"10"},{"size":285,"mtime":1608027761598,"results":"15","hashOfConfig":"10"},{"size":668,"mtime":1608129271795,"results":"16","hashOfConfig":"10"},{"size":2183,"mtime":1608034221265,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},"13qo4nq",{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"21"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"21"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"21"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"21"},"E:\\zeroProject\\client\\src\\index.js",["40"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { setContext } from 'apollo-link-context'\nimport App from './App';\n\nimport { ApolloClient, ApolloProvider, HttpLink, InMemoryCache, split } from '@apollo/client'\n\n//import { WebSocketLink } from '@apollo/client/link/ws'\n//import { getMainDefinition } from '@apollo/client/utilities'\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('zero-user-token')\n  console.log('TOKEN ', token)\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `bearer ${token}` : null,\n    }\n  }\n})\nconst httpLink = new HttpLink({ uri: 'http://localhost:4000' })\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: authLink.concat(httpLink)\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>, \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n",["41","42"],"E:\\zeroProject\\client\\src\\App.js",["43"],"import React, { useState } from 'react'\nimport LoginForm from './components/LoginForm'\nimport { useQuery, useApolloClient  } from '@apollo/client'\nimport Notify from './components/Notify'\nimport Users from './components/Users'\nimport UserForm from './components/UserForm'\nimport { ALL_USERS } from './queries/query'\n\nimport './App.css';\n\nfunction App() {\n  const [page, setPage] = useState('welcome')\n  const [token, setToken] = useState(localStorage.getItem('zero-user-token') ? localStorage.getItem('zero-user-token') : null)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const[ user, setUser ] = useState(null)\n\n  const client = useApolloClient()\n\n  const allUsers = useQuery(ALL_USERS)\n\n  console.log('all Users ',allUsers)\n\n  const logout = () => {\n    setToken(null)\n    localStorage.clear()\n    client.resetStore()\n  }\n\n  const notify = (message) => {\n    setErrorMessage(message)\n    setTimeout(() => {\n      setErrorMessage(null)\n    }, 10000)\n  }\n/*\n  useSubscription(BOOK_ADDED, {\n    onSubscriptionData: ({ subscriptionData }) => {\n      const addedBook = subscriptionData.data.bookAdded\n      console.log(addedBook.title, 'added')\n      notify(`${addedBook.title} added`)\n      updateCacheWith(addedBook)\n    }\n  })\n  */\n\n if (allUsers.loading)  {\n  return <div>loading...</div>\n}\n\n  return (\n    <div className=\"App\">\n\n      <div>\n      <Notify errorMessage={errorMessage} />\n        <button onClick={() => setPage('users')}>users</button>\n        {token ? <button onClick={() => setPage('addUser')}>add User</button> \n        : null }\n        {!token ? <button onClick={() => setPage('login')}>login</button> \n        : <button onClick={() => logout()}>logout</button>}</div>\n\n      <Users\n        show={page === 'users'}\n        users = {allUsers.data}\n      />\n\n\n\n      <UserForm\n        show={page === 'addUser'}\n        setError={notify}\n        token={token}\n        \n      />\n\n      <LoginForm\n        show={page === 'login'}\n        setError={notify}\n        setToken={setToken}\n        setPage={setPage}\n        setUser={setUser}\n        \n      />\n\n\n    </div>\n  );\n}\n\nexport default App;\n","E:\\zeroProject\\client\\src\\components\\LoginForm.js",["44"],"import React, { useState, useEffect } from 'react'\r\nimport { useMutation, useLazyQuery, useQuery } from '@apollo/client'\r\nimport { ME } from '../queries/query'\r\nimport { LOGIN } from '../queries/mutation'\r\n\r\nconst LoginForm = ({ setError, setToken, setUser, show, setPage }) => {\r\n\r\n  const [getMe, meResult] = useLazyQuery(ME)\r\n\r\n  const mee = useQuery(ME)\r\n\r\n  const [username, setUsername] = useState('')\r\n  const [password, setPassword] = useState('')\r\n\r\n  console.log('me in LoginForm ', mee.data)\r\n\r\n  const [ login, result ] = useMutation(LOGIN, {\r\n    //refetchQueries: [{query: ME}],\r\n    onError: (error) => {\r\n      setError(error.graphQLErrors[0].message)\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    if ( result.data ) {\r\n      const token = result.data.login.value\r\n      setToken(token)\r\n     // window.location.reload(true)\r\n      console.log('MEEEEE ', getMe() )\r\n      \r\n      \r\n      localStorage.setItem('zero-user-token', token)\r\n      // setPage('recommendations')\r\n      \r\n    }\r\n  }, [result.data]) // eslint-disable-line\r\n\r\n  useEffect(() => {\r\n\r\n      if (meResult.data) {\r\n        setUser(meResult.data)\r\n      }\r\n    }, [meResult])\r\n\r\n  const submit = async (event) => {\r\n    event.preventDefault()\r\n\r\n    login({ variables: { username, password } })\r\n  }\r\n  if (!show) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={submit}>\r\n        <div>\r\n          username <input\r\n            value={username}\r\n            onChange={({ target }) => setUsername(target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          password <input\r\n            type='password'\r\n            value={password}\r\n            onChange={({ target }) => setPassword(target.value)}\r\n          />\r\n        </div>\r\n        <button type='submit'>login</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LoginForm","E:\\zeroProject\\client\\src\\queries\\query.js",[],"E:\\zeroProject\\client\\src\\queries\\mutation.js",[],"E:\\zeroProject\\client\\src\\components\\Notify.js",["45"],"import React from 'react'\r\n\r\n\r\n  const Notify = ({errorMessage}) => {\r\n      \r\n    if ( !errorMessage ) {\r\n      return null\r\n    }\r\n    return (\r\n      <div style={{color: 'red'}}>\r\n        {console.log(errorMessage), errorMessage}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default Notify","E:\\zeroProject\\client\\src\\components\\Users.js",[],"E:\\zeroProject\\client\\src\\components\\UserForm.js",["46","47"],"import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/client'\r\nimport { useLazyQuery } from '@apollo/client'\r\nimport { CREATE_USER } from '../queries/mutation'\r\nimport Notify from './Notify'\r\n\r\nconst UserForm = (props) => {\r\n  const [username, setUsername] = useState('')\r\n  const [name, setName] = useState('')\r\n  const [password, setPassword] = useState('')\r\n\r\n\r\n  const [ createUser ] = useMutation(CREATE_USER, {\r\n    // refetchQueries: [ { query: ALL_USERS } ],\r\n    onError: (error) => {\r\n        props.setError(error.graphQLErrors[0] ? error.graphQLErrors[0].message :'something went wrong')\r\n    },\r\n    \r\n    update: (store, response) => {\r\n      props.updateCacheWith(response.data.addBook)\r\n    },\r\n    /*\r\n    update: (store, response) => {\r\n      const dataInStore = store.readQuery({ query: ALL_BOOKS })\r\n      store.writeQuery({\r\n        query: ALL_BOOKS,\r\n        data: {\r\n          ...dataInStore,\r\n          allBooks: [ ...dataInStore.allBooks, response.data.addBook ]\r\n        }\r\n      })\r\n    }*/\r\n  })\r\n\r\n\r\n  if (!props.show) {\r\n    return null\r\n  }\r\n\r\n  const submit = async (event) => {\r\n    event.preventDefault()\r\n\r\n   createUser({ variables: { username,  name, password } })\r\n    \r\n    console.log('create user...', createUser)\r\n    console.log('add user...', username, name, password )\r\n\r\n    setUsername('')\r\n    setName('')\r\n    setPassword('')\r\n  }\r\n\r\n\r\n  if(!props.token){\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div>\r\n          <h2> Add User </h2>\r\n      <form onSubmit={submit}>\r\n        <div>\r\n          username\r\n          <input\r\n            value={username}\r\n            onChange={({ target }) => setUsername(target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          name\r\n          <input\r\n            value={name}\r\n            onChange={({ target }) => setName(target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          password\r\n          <input\r\n            value={password}\r\n            onChange={({ target }) => setPassword(target.value)}\r\n          />\r\n        </div>\r\n     \r\n        <button type='submit'>create user</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default UserForm",{"ruleId":"48","severity":1,"message":"49","line":7,"column":65,"nodeType":"50","messageId":"51","endLine":7,"endColumn":70},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"48","severity":1,"message":"56","line":15,"column":10,"nodeType":"50","messageId":"51","endLine":15,"endColumn":14},{"ruleId":"57","severity":1,"message":"58","line":43,"column":8,"nodeType":"59","endLine":43,"endColumn":18,"suggestions":"60"},{"ruleId":"61","severity":1,"message":"62","line":11,"column":35,"nodeType":"63","messageId":"64","endLine":11,"endColumn":36},{"ruleId":"48","severity":1,"message":"65","line":3,"column":10,"nodeType":"50","messageId":"51","endLine":3,"endColumn":22},{"ruleId":"48","severity":1,"message":"66","line":5,"column":8,"nodeType":"50","messageId":"51","endLine":5,"endColumn":14},"no-unused-vars","'split' is defined but never used.","Identifier","unusedVar","no-native-reassign",["67"],"no-negated-in-lhs",["68"],"'user' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setUser'. Either include it or remove the dependency array. If 'setUser' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["69"],"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'useLazyQuery' is defined but never used.","'Notify' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"70","fix":"71"},"Update the dependencies array to be: [meResult, setUser]",{"range":"72","text":"73"},[1144,1154],"[meResult, setUser]"]