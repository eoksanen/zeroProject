[{"E:\\zeroProject\\client\\src\\index.js":"1","E:\\zeroProject\\client\\src\\App.js":"2","E:\\zeroProject\\client\\src\\components\\LoginForm.js":"3","E:\\zeroProject\\client\\src\\queries\\query.js":"4","E:\\zeroProject\\client\\src\\queries\\mutation.js":"5","E:\\zeroProject\\client\\src\\components\\Notify.js":"6","E:\\zeroProject\\client\\src\\components\\Users.js":"7","E:\\zeroProject\\client\\src\\components\\UserForm.js":"8","E:\\zeroProject\\client\\src\\queries\\subscription.js":"9"},{"size":1792,"mtime":1608714832020,"results":"10","hashOfConfig":"11"},{"size":4932,"mtime":1609592934291,"results":"12","hashOfConfig":"11"},{"size":1884,"mtime":1608385174926,"results":"13","hashOfConfig":"11"},{"size":912,"mtime":1608129044540,"results":"14","hashOfConfig":"11"},{"size":986,"mtime":1608564098979,"results":"15","hashOfConfig":"11"},{"size":285,"mtime":1608027761598,"results":"16","hashOfConfig":"11"},{"size":4310,"mtime":1609595026375,"results":"17","hashOfConfig":"11"},{"size":2301,"mtime":1608564314843,"results":"18","hashOfConfig":"11"},{"size":398,"mtime":1608726178827,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"13qo4nq",{"filePath":"23","messages":"24","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"E:\\zeroProject\\client\\src\\index.js",[],["44","45"],"E:\\zeroProject\\client\\src\\App.js",["46","47","48","49"],"import React, { useState } from 'react'\nimport LoginForm from './components/LoginForm'\nimport { useQuery, useApolloClient, useSubscription } from '@apollo/client'\nimport Notify from './components/Notify'\nimport Users from './components/Users'\nimport UserForm from './components/UserForm'\nimport { ALL_USERS } from './queries/query'\nimport { USER_ADDED, USER_REMOVED } from './queries/subscription'\nimport {\n  BrowserRouter as Router,\n  Switch, Route, Link\n} from \"react-router-dom\"\n\nimport './App.css';\n\nfunction App() {\n  //const [page, setPage] = useState('welcome')\n  const [token, setToken] = useState(localStorage.getItem('zero-user-token') ? localStorage.getItem('zero-user-token') : null)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const[ user, setUser ] = useState(null)\n\n  const client = useApolloClient()\n\n  const allUsers = useQuery(ALL_USERS)\n\n  const updateCacheWith = (addedUser) => {\n    console.log('addedUser ',addedUser)\n    const includedIn = (set, object) => \n      set.map(p => p.id).includes(object.id)  \n\n    const dataInStore = client.readQuery({ query: ALL_USERS })\n    console.log('Cache already updated ',includedIn(dataInStore.allUsers, addedUser))\n    /*\n    if (!includedIn(dataInStore.allUsers, addedUser)) {\n      client.writeQuery({\n        query: ALL_USERS,\n        data: { allUsers : dataInStore.allUsers.concat(addedUser) }\n      })\n      \n    } */  \n    \n  }\n\n  const updateCacheWithR = (removedUser) => {\n    console.log('removedUser ',removedUser)\n\n\n\n    const idToRemove = removedUser.id;\n\nclient.modify({\n  id: client.identify(removedUser),\n  fields: {\n    allUsers(existingUserRefs, { readField }) {\n      return existingUserRefs.filter(\n        userRef => idToRemove !== readField('id', userRef)\n      );\n    },\n  },\n});\n\n\n\n/*\n    const includedIn = (set, object) => \n      set.map(p => p.id).includes(object.id)  \n\n    const dataInStore = client.readQuery({ query: ALL_USERS })\n    console.log('redQuery ALL_USERS: ',dataInStore)\n    console.log('Cache already updated ',includedIn(dataInStore.allUsers, removedUser))\n    if (includedIn(dataInStore.allUsers, removedUser)) {\n\n\n\n\n*/ \n/*\nconst dataInStore = client.readQuery({ query: ALL_USERS })\n      const updatedUserListAfterRemove = dataInStore.allUsers.map(user => user.id !== removedUser.id)\n     console.log(dataInStore)\n      client.writeQuery({\n        query: ALL_USERS,\n\n        data: { allUsers: [ ...updatedUserListAfterRemove ] }\n      })\n      \n  //  } */\n  }\n\n  console.log('all Users ',allUsers)\n\n  const logout = () => {\n    setToken(null)\n    localStorage.clear()\n    client.resetStore()\n  }\n\n  const notify = (message) => {\n    setErrorMessage(message)\n    setTimeout(() => {\n      setErrorMessage(null)\n    }, 10000)\n  }\n\n  useSubscription(USER_ADDED, {\n    onSubscriptionData: ({ subscriptionData }) => {\n      console.log('subscriptionData ',subscriptionData.data.userAdded)\n\n      const addedUser = subscriptionData.data.userAdded\n      //console.log(addedUser.name, 'addedSubscription')\n      //notify(`${addedUser.name} added`)\n      //updateCacheWith(addedUser)\n    }\n  })\n\n  useSubscription(USER_REMOVED, {\n    onSubscriptionData: ({ subscriptionData }) => {\n      console.log('subscriptionData ',subscriptionData.data.userRemoved)\n\n      const removedUser = subscriptionData.data.userRemoved\n      //console.log(addedUser.name, 'addedSubscription')\n      //notify(`${addedUser.name} added`)\n   //   updateCacheWithR(removedUser)\n    }\n  })\n\n\n if (allUsers.loading)  {\n  return <div>loading...</div>\n}\n\nconst padding = {\n  padding: 5\n}\n\n  return (\n    <div className=\"App\">\n\n\n<table className='menu'>\n        <tbody>\n          <tr>\n            <td><Link style={padding} to=\"/\">Home</Link></td>\n            <td><Link style={padding} to=\"/users\">users</Link></td>\n            <td><Link style={padding} to=\"/addUser\">adduser</Link></td>\n            <td>      \n              {token === null ?\n              <Link style={padding} to=\"/login\">login</Link> :  <p style={padding}>{user} logged in</p>}\n            </td>\n            <td> \n            {token === null ? null :\n              <button onClick={() => logout()}>logout</button>}\n            </td>\n          </tr>\n        </tbody>\n      </table>\n\n      <div>\n      <Notify errorMessage={errorMessage} />\n  </div>\n\n\n    <Switch>\n      <Route path=\"/users\">\n      <Users\n        show={true}\n        users = {allUsers.data}\n        setError = {setErrorMessage}\n      />\n      </Route>\n      <Route path=\"/addUser\">\n      <UserForm\n        show={true}\n        setError={notify}\n        token={token}    \n        updateCacheWith={updateCacheWith} \n      />\n\n      </Route>\n      <Route path=\"/login\">\n      <LoginForm\n        setError={notify}\n        setUser={setUser}\n        setToken={setToken}\n        token={token}     \n      />\n\n      </Route>\n      <Route path=\"/\">\n      \n      </Route>\n    </Switch>\n\n\n    </div>\n  );\n}\n\nexport default App;\n","E:\\zeroProject\\client\\src\\components\\LoginForm.js",[],"E:\\zeroProject\\client\\src\\queries\\query.js",[],"E:\\zeroProject\\client\\src\\queries\\mutation.js",[],["50","51"],"E:\\zeroProject\\client\\src\\components\\Notify.js",["52"],"import React from 'react'\r\n\r\n\r\n  const Notify = ({errorMessage}) => {\r\n      \r\n    if ( !errorMessage ) {\r\n      return null\r\n    }\r\n    return (\r\n      <div style={{color: 'red'}}>\r\n        {console.log(errorMessage), errorMessage}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default Notify","E:\\zeroProject\\client\\src\\components\\Users.js",["53","54","55","56"],"import React , {useEffect} from 'react'\r\nimport {useMutation} from '@apollo/client'\r\nimport { ALL_USERS } from '../queries/query'\r\nimport { DELETE_USER, LOGIN, TEST, CREATE_USER } from '../queries/mutation'\r\n\r\nconst Users = ({users, setError}) => {\r\n\r\n\r\n    const [removeUser, user] = useMutation(DELETE_USER, {\r\n      \r\n        //refetchQueries: [{query: ME}],\r\n        onError: (error) => {\r\n          console.log('ERRRROOOR', error)\r\n          setError(error.graphQLErrors[0] ? error.graphQLErrors[0].message : null)\r\n        },\r\n\r\n        //refetchQueries: [{query: ALL_USERS}]\r\n\r\n        \r\n        update: (store, response) => {\r\n\r\n          console.log('responce ',response)\r\n          \r\n          console.log('id ', response.data.removeUser.id)\r\n\r\n\r\n          store.modify({\r\n            fields: {\r\n              allUsers(existingUserRefs, { readField }) {\r\n                console.log('existingUserRefs ',existingUserRefs)\r\n                console.log('')\r\n                return existingUserRefs.filter(\r\n                  userRef => response.data.removeUser.id !== readField('id', userRef)\r\n                );\r\n              },\r\n            },\r\n          });\r\n\r\n\r\n/*\r\n          const removedId = store.identify(response.data.removeUser)\r\n\r\n          console.log('removedIdFrom apollo cache: ',removedId)\r\n          console.log('removedUser: ',response.data.removeUser)\r\n          const dataInStore = store.readQuery({ query: ALL_USERS })\r\n          const updatedUserListAfterRemove = dataInStore.allUsers.filter(usr => usr.id !== response.data.removeUser.id )\r\n      \r\n     \r\n\r\n          console.log('datainStore: ',dataInStore)\r\n          console.log('updatedUserListAfterRemove: ',updatedUserListAfterRemove)\r\n          store.evict({\r\n            // Often cache.evict will take an options.id property, but that's not necessary\r\n            // when evicting from the ROOT_QUERY object, as we're doing here.\r\n            fieldName: \"allUsers\",\r\n            // No need to trigger a broadcast here, since writeQuery will take care of that.\r\n            broadcast: false,\r\n          });\r\n            store.writeQuery({\r\n            query: ALL_USERS,\r\n            data: {\r\n             // ...dataInStore,\r\n              allUsers: [ ...updatedUserListAfterRemove ]\r\n            }\r\n          })*/\r\n/*\r\n          const id = response.data.removeUser.id\r\n\r\n          store.modify({\r\n            allUsers(list, { readField }) {\r\n              return list.filter(n => readField(\"id\", n) !== id);\r\n            },\r\n          });\r\n          */\r\n        }\r\n        \r\n    })\r\n\r\n    useEffect(() => {\r\n      if ( user.data ) {\r\n  \r\n        console.log('removed user id from server: ',user)\r\n        \r\n      }\r\n    }, [user.data]) // eslint-disable-line\r\n\r\n    const [ createUser ] = useMutation(CREATE_USER, {\r\n        // refetchQueries: [ { query: ALL_USERS } ],\r\n        onError: (error) => {\r\n            setError(error.graphQLErrors[0] ? error.graphQLErrors[0].message : null)\r\n        },\r\n       /* \r\n        update: (store, response) => {\r\n          updateCacheWith(user)\r\n          \r\n        },*/\r\n        /*\r\n        update: (store, response) => {\r\n          const dataInStore = store.readQuery({ query: ALL_BOOKS })\r\n          store.writeQuery({\r\n            query: ALL_BOOKS,\r\n            data: {\r\n              ...dataInStore,\r\n              allBooks: [ ...dataInStore.allBooks, response.data.addBook ]\r\n            }\r\n          })\r\n        }*/\r\n      })\r\n\r\n\r\n    const deleteUser = (id) => {\r\n\r\n       removeUser({ variables: {id}})\r\n        \r\n        console.log('removed user id: ',id)\r\n        \r\n        \r\n\r\n    }\r\n\r\n\r\n//if(!show) return null\r\n\r\n    return (\r\n        <div>\r\n            <h2>Users</h2>\r\n            <table>\r\n                <tbody>\r\n                <tr>\r\n                    <th>name</th>\r\n                    <th>\r\n                    username\r\n                    </th>\r\n\r\n                </tr>\r\n                {users.allUsers.map(a =>\r\n                    <tr key={a.id}>\r\n                    <td>{a.name}</td>\r\n                    <td>{a.username}</td>\r\n                    <td><button onClick={()=>deleteUser(a.id)}>DEL</button></td>\r\n                    </tr>\r\n                )}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Users","E:\\zeroProject\\client\\src\\components\\UserForm.js",["57","58"],"import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/client'\r\nimport { useLazyQuery } from '@apollo/client'\r\nimport { ALL_USERS } from '../queries/query'\r\nimport { CREATE_USER } from '../queries/mutation'\r\nimport Notify from './Notify'\r\n\r\nconst UserForm = (props) => {\r\n  const [username, setUsername] = useState('')\r\n  const [name, setName] = useState('')\r\n  const [password, setPassword] = useState('')\r\n\r\n\r\n  const [ createUser ] = useMutation(CREATE_USER, {\r\n    // refetchQueries: [ { query: ALL_USERS } ],\r\n    onError: (error) => {\r\n        props.setError(error.graphQLErrors[0] ? error.graphQLErrors[0].message : null)\r\n    },\r\n    /*\r\n    update: (store, response) => {\r\n      console.log('response mutation createUser ',response.data.createUser)\r\n      props.updateCacheWith(response.data.createUser)\r\n    },\r\n    */\r\n    \r\n    update: (store, response) => {\r\n      const dataInStore = store.readQuery({ query: ALL_USERS })\r\n      store.writeQuery({\r\n        query: ALL_USERS,\r\n        data: {\r\n          ...dataInStore,\r\n          allUsers: [ ...dataInStore.allUsers, response.data.createUser ]\r\n        }\r\n      })\r\n    }\r\n  })\r\n\r\n\r\n  if (!props.show) {\r\n    return null\r\n  }\r\n\r\n  const submit = async (event) => {\r\n    event.preventDefault()\r\n\r\n   createUser({ variables: { username,  name, password } })\r\n    \r\n    console.log('create user...', createUser)\r\n    console.log('add user...', username, name, password )\r\n\r\n    setUsername('')\r\n    setName('')\r\n    setPassword('')\r\n  }\r\n\r\n\r\n  if(!props.token){\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div>\r\n          <h2> Add User </h2>\r\n      <form onSubmit={submit}>\r\n        <div>\r\n          username\r\n          <input\r\n            value={username}\r\n            onChange={({ target }) => setUsername(target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          name\r\n          <input\r\n            value={name}\r\n            onChange={({ target }) => setName(target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          password\r\n          <input\r\n            value={password}\r\n            onChange={({ target }) => setPassword(target.value)}\r\n          />\r\n        </div>\r\n     \r\n        <button type='submit'>create user</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default UserForm","E:\\zeroProject\\client\\src\\queries\\subscription.js",[],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":10,"column":20,"nodeType":"65","messageId":"66","endLine":10,"endColumn":26},{"ruleId":"63","severity":1,"message":"67","line":44,"column":9,"nodeType":"65","messageId":"66","endLine":44,"endColumn":25},{"ruleId":"63","severity":1,"message":"68","line":109,"column":13,"nodeType":"65","messageId":"66","endLine":109,"endColumn":22},{"ruleId":"63","severity":1,"message":"69","line":120,"column":13,"nodeType":"65","messageId":"66","endLine":120,"endColumn":24},{"ruleId":"59","replacedBy":"70"},{"ruleId":"61","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":11,"column":35,"nodeType":"74","messageId":"75","endLine":11,"endColumn":36},{"ruleId":"63","severity":1,"message":"76","line":3,"column":10,"nodeType":"65","messageId":"66","endLine":3,"endColumn":19},{"ruleId":"63","severity":1,"message":"77","line":4,"column":23,"nodeType":"65","messageId":"66","endLine":4,"endColumn":28},{"ruleId":"63","severity":1,"message":"78","line":4,"column":30,"nodeType":"65","messageId":"66","endLine":4,"endColumn":34},{"ruleId":"63","severity":1,"message":"79","line":87,"column":13,"nodeType":"65","messageId":"66","endLine":87,"endColumn":23},{"ruleId":"63","severity":1,"message":"80","line":3,"column":10,"nodeType":"65","messageId":"66","endLine":3,"endColumn":22},{"ruleId":"63","severity":1,"message":"81","line":6,"column":8,"nodeType":"65","messageId":"66","endLine":6,"endColumn":14},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'updateCacheWithR' is assigned a value but never used.","'addedUser' is assigned a value but never used.","'removedUser' is assigned a value but never used.",["82"],["83"],"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'ALL_USERS' is defined but never used.","'LOGIN' is defined but never used.","'TEST' is defined but never used.","'createUser' is assigned a value but never used.","'useLazyQuery' is defined but never used.","'Notify' is defined but never used.","no-global-assign","no-unsafe-negation"]